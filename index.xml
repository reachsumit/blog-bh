<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Sumit&#39;s Diary</title>
        <link>https://blog.reachsumit.com/</link>
        <description>Welcome to Sumit Kumar&#39;s Personal Blog!</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sam.sumitkumar@gmail.com (Sumit Kumar)</managingEditor>
            <webMaster>sam.sumitkumar@gmail.com (Sumit Kumar)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 20 Jun 2022 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="https://blog.reachsumit.com/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Comparing NoSQL Models: A Guide for Selecting the Best-fitting Database Model</title>
    <link>https://blog.reachsumit.com/posts/2022/06/nosql-models-comparison/</link>
    <pubDate>Mon, 20 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>Sumit Kumar</author>
    <guid>https://blog.reachsumit.com/posts/2022/06/nosql-models-comparison/</guid>
    <description><![CDATA[In the last article, I did a literature review defining the origin of SQL, NoSQL, and NewSQL. I also went over the important theorems and properties that could help in the categorization and comparison of the different types of databases. If you haven&rsquo;t read that article yet, I highly recommend you to go over it: SQL vs NoSQL vs NewSQL: An In-depth Literature Review. In this article, we will build upon those concepts and learn how to categorize NoSQL databases based on the type of data we intend to store.]]></description>
</item>
<item>
    <title>SQL vs NoSQL vs NewSQL: An In-depth Literature Review</title>
    <link>https://blog.reachsumit.com/posts/2022/06/sql-nosql-newsql/</link>
    <pubDate>Thu, 09 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>Sumit Kumar</author>
    <guid>https://blog.reachsumit.com/posts/2022/06/sql-nosql-newsql/</guid>
    <description><![CDATA[SQL Databases Origin The concept of Relational Databases was originally developed in the 1970s by IBM 1. They are also known as SQL (Structured Query Language) databases, named after the query language used for managing data in Relational Database Management Systems (RDBMS). Over multiple years of research and development, an unmatched level of reliability, stability, and strong mechanisms to store and query data have been baked into Relational Databases. They have been the storage of choice for a majority of transactional data management applications such as banking, airline reservation, online e-commerce, and supply chain management applications.]]></description>
</item>
<item>
    <title>Towards Empathetic Dialogue Systems</title>
    <link>https://blog.reachsumit.com/posts/2020/12/generating-empathetic-responses/</link>
    <pubDate>Mon, 07 Dec 2020 00:00:00 &#43;0000</pubDate>
    <author>Sumit Kumar</author>
    <guid>https://blog.reachsumit.com/posts/2020/12/generating-empathetic-responses/</guid>
    <description><![CDATA[<p>Recognizing feelings in the conversation partner and replying empathetically is a trivial skill for humans. But how can we infuse empathy into responses generated by a conversational dialogue agent or any of the text generation algorithm in Natural Language Processing? In this article, I will describe what empathy means through the lens of various academic disciplines and then do an in-depth review of the prior and current state-of-the-art NLU systems that can simulate empathy.</p>]]></description>
</item>
<item>
    <title>Effective LeetCode: Understanding the Sliding Window Pattern</title>
    <link>https://blog.reachsumit.com/posts/2020/10/leetcode-sliding-window/</link>
    <pubDate>Mon, 26 Oct 2020 00:00:00 &#43;0000</pubDate>
    <author>Sumit Kumar</author>
    <guid>https://blog.reachsumit.com/posts/2020/10/leetcode-sliding-window/</guid>
    <description><![CDATA[<p>Identifying patterns among questions is quite an effective strategy when you are grinding LeetCode in preparation for your upcoming software engineering interviews. In this article, you will develop intuitions about Sliding Window pattern. You will also get a template approach to write code to solve these problems. I will also walk you through some LeetCode questions to show how to apply the template and at the end, there will be some LeetCode exercises for you to practice what you learn.</p>]]></description>
</item>
<item>
    <title>How Twitter Reduced Search Indexing Latency to One Second</title>
    <link>https://blog.reachsumit.com/posts/2020/07/twitter-search-redesign/</link>
    <pubDate>Sun, 19 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>Sumit Kumar</author>
    <guid>https://blog.reachsumit.com/posts/2020/07/twitter-search-redesign/</guid>
    <description><![CDATA[<p>In June 2020, Twitter announced a major overhaul in its storage and retrieval systems. These changes allowed Twitter to reduce the search index latency from 15 seconds to 1 second.</p>
<p>So, what did they do to get such impressive gains? Allow me to explain!</p>]]></description>
</item>
<item>
    <title>Building a spell-checker with FastText word embeddings</title>
    <link>https://blog.reachsumit.com/posts/2020/07/spell-checker-fasttext/</link>
    <pubDate>Sat, 18 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>Sumit Kumar</author>
    <guid>https://blog.reachsumit.com/posts/2020/07/spell-checker-fasttext/</guid>
    <description><![CDATA[<p>Word vector representations with subword information are great for NLP modeling. But can we make lexical corrections using a trained embeddings space? Can its accuracy be high enough to beat Peter Norvig&rsquo;s spell-corrector? Let&rsquo;s find out!</p>]]></description>
</item>
<item>
    <title>Skip List Data Structure - Explained!</title>
    <link>https://blog.reachsumit.com/posts/2020/07/skip-list/</link>
    <pubDate>Tue, 14 Jul 2020 00:00:00 &#43;0000</pubDate>
    <author>Sumit Kumar</author>
    <guid>https://blog.reachsumit.com/posts/2020/07/skip-list/</guid>
    <description><![CDATA[<p>Analyzing randomness is hard. So why would you want to choose a probabilistic data structure in your system implementation? Allow me to explain!</p>]]></description>
</item>
</channel>
</rss>
